// Automatically generated by MockGen. DO NOT EDIT!
// Source: client.go

package mock

import (
	gomock "github.com/golang/mock/gomock"
	. "github.com/ory-am/hydra/client"
	http "net/http"
)

// Mock of Client interface
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *_MockClientRecorder
}

// Recorder for MockClient (not exported)
type _MockClientRecorder struct {
	mock *MockClient
}

func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &_MockClientRecorder{mock}
	return mock
}

func (_m *MockClient) EXPECT() *_MockClientRecorder {
	return _m.recorder
}

func (_m *MockClient) IsAllowed(ar *Action) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsAllowed", ar)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) IsAllowed(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsAllowed", arg0)
}

func (_m *MockClient) IsRequestAllowed(req *http.Request, resource string, permission string, owner string) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsRequestAllowed", req, resource, permission, owner)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) IsRequestAllowed(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsRequestAllowed", arg0, arg1, arg2, arg3)
}

func (_m *MockClient) IsAuthenticated(token string) (bool, error) {
	ret := _m.ctrl.Call(_m, "IsAuthenticated", token)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockClientRecorder) IsAuthenticated(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsAuthenticated", arg0)
}
